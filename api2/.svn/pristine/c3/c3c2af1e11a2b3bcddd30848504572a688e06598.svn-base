SET(
	NAME
	rec_robotino_api2
)

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_BINARY_DIR}
)

FILE( GLOB REC_ROBOTINO_API2_SRCS *.cpp )
FILE( GLOB REC_ROBOTINO_API2_HEADER *.h )
FILE( GLOB REC_ROBOTINO_API2_PRIVATE_HEADER *.hpp )
FILE( GLOB REC_ROBOTINO_API2_EVENTS comevent/*.h )

SET( REC_ROBOTINO_API2_HEADER ${REC_ROBOTINO_API2_HEADER} "${CMAKE_CURRENT_BINARY_DIR}/rec_robotino_api2_version.h" )

IF( WIN32 AND NOT REC_ROBOTINO_API2_STATIC)
	SET( REC_ROBOTINO_API2_SRCS ${REC_ROBOTINO_API2_SRCS} "${CMAKE_CURRENT_BINARY_DIR}/rec_robotino_api2_version.rc" )
ENDIF( WIN32 AND NOT REC_ROBOTINO_API2_STATIC)

MY_WRAP_CPP(
	REC_ROBOTINO_API2_MOC_SRCS
	${NAME}
	${REC_ROBOTINO_API2_HEADER}
	${REC_ROBOTINO_API2_PRIVATE_HEADER}
)

FILE( GLOB REC_ROBOTINO_API2_C_SRCS c/*.cpp )
FILE( GLOB REC_ROBOTINO_API2_C_HEADER c/*.h )
FILE( GLOB REC_ROBOTINO_API2_C_PRIVATE_HEADER c/*.hh )
	

IF( REC_ROBOTINO_API2_STATIC )	
	SET( LIBTYPE STATIC )
ELSE( REC_ROBOTINO_API2_STATIC )	
	SET( LIBTYPE SHARED )
ENDIF( REC_ROBOTINO_API2_STATIC )

ADD_LIBRARY(
	${NAME}
	${LIBTYPE}
	${REC_ROBOTINO_API2_SRCS}
	${REC_ROBOTINO_API2_HEADER}
	${REC_ROBOTINO_API2_PRIVATE_HEADER}
	${REC_ROBOTINO_API2_EVENTS}
	${REC_ROBOTINO_API2_MOC_SRCS}
	${REC_ROBOTINO_API2_C_SRCS}
	${REC_ROBOTINO_API2_C_HEADER}
	${REC_ROBOTINO_API2_C_PRIVATE_HEADER}
)

IF(WIN32)
	SET_TARGET_PROPERTIES(
		${NAME}
		PROPERTIES
		COMPILE_FLAGS "/wd4251 /MP"
	)
	IF( REC_ROBOTINO_API2_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET_TARGET_PROPERTIES(
			${NAME}
			PROPERTIES
			STATIC_LIBRARY_FLAGS "/machine:x64"
		)
	ENDIF( REC_ROBOTINO_API2_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
ELSE( WIN32 )
	IF( REC_ROBOTINO_API2_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -fPIC" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC" )
	ELSE( REC_ROBOTINO_API2_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -fPIC -Wl,-export-dynamic" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wl,-export-dynamic" )
	ENDIF( REC_ROBOTINO_API2_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
ENDIF( WIN32 )

TARGET_LINK_LIBRARIES(
	${NAME}
	rec_robotino3_fleetcom
	rec_cv_lt
	${REC_ROBOTINO_RPC_LIBRARY}
	${REC_RPC_LIBRARY}
)

IF(USE_SYSTEM_QT)
	TARGET_LINK_LIBRARIES(
		${NAME}
		${QT_QTCORE_LIBRARY}
		${QT_QTNETWORK_LIBRARY}
		${QT_QTXML_LIBRARY}
		${QT_HELP_LIBRARIES}
	)
ELSE()
	TARGET_LINK_LIBRARIES(
		${NAME}
		${QT_STATIC_QTXML_LIBRARY}
		${QT_STATIC_QTCORE_LIBRARY}
		${QT_STATIC_QTNETWORK_LIBRARY}
		${QT_STATIC_HELP_LIBRARIES}
	)
ENDIF()

IF( NOT WIN32 )
	IF (APPLE)
		TARGET_LINK_LIBRARIES(
		${NAME}
		dl
		#z
		#rt
		pthread
	)
	ELSE (APPLE)
		TARGET_LINK_LIBRARIES(
		${NAME}
		dl
		#z
		rt
		pthread
	)
	ENDIF (APPLE)
ENDIF( NOT WIN32 )

IF( UNIX AND NOT APPLE )
	find_library( JPEG_LIB libjpeg.so )
	TARGET_LINK_LIBRARIES(
		${NAME}
		${JPEG_LIB}
	)
ENDIF()

GENERATE_VERSION( ${NAME} ${CMAKE_CURRENT_BINARY_DIR}/rec_robotino_api2_version.h "${ROBOTINO_API2_VERSION}" "${NAME}" "" )
IF( NOT REC_ROBOTINO_API2_STATIC )
	GENERATE_VERSION_RC( ${NAME} ${CMAKE_CURRENT_BINARY_DIR}/rec_robotino_api2_version.rc "${ROBOTINO_API2_VERSION}" "REC ROBOTINO COM library" "${NAME}" "${NAME}.dll" 1 )
ENDIF( NOT REC_ROBOTINO_API2_STATIC )

SET( REC_ROBOTINO_API2_HEADER ${REC_ROBOTINO_API2_HEADER} "${CMAKE_CURRENT_BINARY_DIR}/rec_robotino_api2_version.h" )

SOURCE_GROUP( Moc REGULAR_EXPRESSION "(moc_|qrc_)" )
SOURCE_GROUP( Sources FILES ${REC_ROBOTINO_API2_SRCS} ${REC_ROBOTINO_API2_HEADER} ${REC_ROBOTINO_API2_PRIVATE_HEADER} )
SOURCE_GROUP( Events FILES ${REC_ROBOTINO_API2_EVENTS} )
SOURCE_GROUP( C-Sources FILES ${REC_ROBOTINO_API2_C_SRCS} ${REC_ROBOTINO_API2_C_HEADER} ${REC_ROBOTINO_API2_C_PRIVATE_HEADER} )
SOURCE_GROUP( Resources FILES
"${CMAKE_CURRENT_BINARY_DIR}/rec/robotino/api2/rec_robotino_api2_version.h"
"${CMAKE_CURRENT_BINARY_DIR}/rec/robotino/api2/rec_robotino_api2_version.rc"
)

SET( REC_ROBOTINO_API2_INCLUDE_INSTALL_DIR include/rec/robotino/api2 )


IF (APPLE)
	set_target_properties (${NAME} PROPERTIES XCODE_ATTRIBUTE_SYMROOT "${ROBOTINO_API2_BINARY_DIR}")
	set_target_properties (${NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "\$(BUILD_DIR)/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)")
ENDIF (APPLE)

IF(NOT APPLE)
	INSTALL(
		TARGETS ${NAME}
		ARCHIVE DESTINATION lib
		LIBRARY DESTINATION lib
		RUNTIME DESTINATION bin
	)
ENDIF()

INSTALL(
	FILES
	${REC_ROBOTINO_API2_HEADER}
	DESTINATION ${REC_ROBOTINO_API2_INCLUDE_INSTALL_DIR}
)

INSTALL(
	FILES
	${REC_ROBOTINO_API2_C_HEADER}
	DESTINATION ${REC_ROBOTINO_API2_INCLUDE_INSTALL_DIR}/c
)

ADD_SUBDIRECTORY( doxygen )