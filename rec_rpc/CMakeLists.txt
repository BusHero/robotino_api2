#Copyright (c) 2011, REC Robotics Equipment Corporation GmbH, Planegg, Germany
#All rights reserved.

#Redistribution and use in source and binary forms, with or without modification,
#are permitted provided that the following conditions are met:

#- Redistributions of source code must retain the above copyright notice,
#  this list of conditions and the following disclaimer.
#- Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation and/or
#  other materials provided with the distribution.
#- Neither the name of the REC Robotics Equipment Corporation GmbH nor the names of
#  its contributors may be used to endorse or promote products derived from this software
#  without specific prior written permission.

#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
#OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
#AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
#IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cmake_minimum_required( VERSION 3.0 )
PROJECT( REC_RPC )



SET( REC_RPC_VERSION 1.6.0 CACHE STRING "REC RPC Version" FORCE )
STRING( REGEX MATCHALL [0-9]+ VERSION_SPLIT ${REC_RPC_VERSION} )
LIST( GET VERSION_SPLIT 0 REC_RPC_MAJOR_VER )
LIST( GET VERSION_SPLIT 1 REC_RPC_MINOR_VER )
LIST( GET VERSION_SPLIT 2 REC_RPC_PATCH_VER )
STRING( REGEX MATCH [a-z,A-Z]+.* REC_RPC_VER_SUFFIX ${REC_RPC_VERSION} )



IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	PROJECT( REC_RPC_x64 )
	SET( ARCHITECTURE amd64 )
ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	SET( ARCHITECTURE i386 )
ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
MESSAGE("\nARCHITECTURE:${ARCHITECTURE}\n")


MESSAGE("CMAKE_CURRENT_SOURCE_DIR:${CMAKE_CURRENT_SOURCE_DIR}")
MESSAGE("CMAKE_CURRENT_BINARY_DIR:${CMAKE_CURRENT_BINARY_DIR}\n")
SET( REC_RPC_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" )
SET( REC_RPC_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}" )
SET( DO_REC_RPC_INSTALL 1 )
SET( CMAKE_MODULE_PATH ${REC_RPC_SOURCE_DIR}/cmake ${REC_RPC_SOURCE_DIR}/utils)
MESSAGE("REC_RPC_SOURCE_DIR:${REC_RPC_SOURCE_DIR}")
MESSAGE("REC_RPC_BINARY_DIR:${REC_RPC_BINARY_DIR}")
MESSAGE("DO_REC_RPC_INSTALL:${DO_REC_RPC_INSTALL}")
MESSAGE("CMAKE_MODULE_PATH:${CMAKE_MODULE_PATH}\n")
 


INCLUDE( GenerateVersion )
MESSAGE("After Include( GenerateVersion )\n")


SET(GLOBAL_TARGET_DIR ${CMAKE_CURRENT_BINARY_DIR}/target)
MESSAGE("GLOBAL_TARGET_DIR:${GLOBAL_TARGET_DIR}\n") 

FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR} )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/debug )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/release )
    


SET(EXECUTABLE_OUTPUT_PATH ${GLOBAL_TARGET_DIR})
MESSAGE("EXECUTABLE_OUTPUT_PATH:${EXECUTABLE_OUTPUT_PATH}\n")
  


SET(LIBRARY_OUTPUT_PATH ${GLOBAL_TARGET_DIR})
MESSAGE("LIBRARY_OUTPUT_PATH:${LIBRARY_OUTPUT_PATH}\n")



FIND_PACKAGE( Doxygen ) 
MESSAGE("After find_package( Doxygen )\n")



INCLUDE( MyQt )
MESSAGE("After include( MyQt )\n")



INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib)



SET( INSTALL_ROOT ${CMAKE_CURRENT_BINARY_DIR}/install )
MESSAGE("INSTALL_ROOT:${INSTALL_ROOT}\n")



IF( WIN32 )
	SET(CMAKE_INSTALL_PREFIX ${INSTALL_ROOT})
	SET(CMAKE_DEBUG_POSTFIX "d" )
	MESSAGE("CMAKE_INSTALL_PREFIX:${CMAKE_INSTALL_PREFIX}\n")
ENDIF( WIN32 )



FILE( MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX} )
MESSAGE("MAKE_DIRECTORY ${CMAKE_INSTALL_PREFIX}\n")


ADD_SUBDIRECTORY( lib/rec/rpc )
ADD_SUBDIRECTORY( examples )



IF( DOXYGEN_FOUND )
	ADD_SUBDIRECTORY( doc )
	MESSAGE("ADD_SUBDIRECTORY(doc)\n")
ENDIF( DOXYGEN_FOUND )



SET( CHANGELOG_NAME "CHANGELOG_rec_rpc.txt" )
SET( CHANGELOG_FILE "${CMAKE_CURRENT_BINARY_DIR}/${CHANGELOG_NAME}" )
MESSAGE("CHANGELOG_NAME:${CHANGELOG_NAME}")
MESSAGE("CHANGELOG_FILE:${CHANGELOG_FILE}\n")
CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.txt" "${CHANGELOG_NAME}" COPYONLY )



IF( QT5_FOUND )
	SET( DEPENDS "qt5-default" )
ELSE()
	SET( DEPENDS "libqtcore4, libqt4-network, libqt4-xml" )
ENDIF()
MESSAGE("DEPENDS:${DEPENDS}\n")



SET( PACKAGE_NAME rec-rpc )
MESSAGE("PACKAGE_NAME:${PACKAGE_NAME}")
SET( PACKAGE_VERSION ${REC_RPC_VERSION} )
MESSAGE("PACKAGE_VERSION:${PACKAGE_VERSION}\n")
INCLUDE( CreateInstaller )



FILE( WRITE "${CMAKE_INSTALL_PREFIX}/FindRecRpc.cmake"
"IF( NOT RECRPC_DIR )
	IF( WIN32 )
		IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE \"\\\\\" \"/\" RECRPC_DIR \"\$ENV{RECRPC64_DIR}\" )
		ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE \"\\\\\" \"/\" RECRPC_DIR \"\$ENV{RECRPC32_DIR}\" )
		ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	ELSE( WIN32 )
			SET( RECRPC_DIR \"/usr/local/rec_rpc\" )
	ENDIF( WIN32 )
ENDIF( NOT RECRPC_DIR )

IF( NOT RECRPC_DIR )
	IF( WIN32 )
		IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE \"\\\\\" \"/\" PROGRAMS \"\$ENV{ProgramFiles}\" )
			SET( RECRPC_DIR \"\${PROGRAMS}/REC GmbH/rpc\" )
		ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE \"\\\\\" \"/\" PROGRAMS \"\$ENV{ProgramFiles(x86)}\" )
			SET( RECRPC_DIR \"\${PROGRAMS}/REC GmbH/rpc\" )
		ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	ELSE( WIN32 )
		SET( RECRPC_DIR \"/usr/local/rec_rpc\" )
	ENDIF( WIN32 )
ENDIF( NOT RECRPC_DIR )

SET( REC_RPC_INCLUDE_DIR \"\${RECRPC_DIR}/include\" ) 
SET( REC_RPC_LIB_DIR \"\${RECRPC_DIR}/lib\" ) 
SET( REC_RPC_BIN_DIR \"\${RECRPC_DIR}/bin\" ) 

FIND_PATH(
	REC_RPC_INCLUDES
	rec/rpc/Client.h
	\${REC_RPC_INCLUDE_DIR}
)

FIND_LIBRARY(
	REC_RPC_RELEASE_LIBRARY
	NAMES 
	rec_rpc
	PATHS
	\${REC_RPC_LIB_DIR}
)

IF( WIN32 )
	FIND_LIBRARY(
		REC_RPC_DEBUG_LIBRARY
		NAMES 
		rec_rpcd
		PATHS
		\${REC_RPC_LIB_DIR}
	)

	SET( REC_RPC_LIBRARY optimized \"\${REC_RPC_RELEASE_LIBRARY}\" debug \"\${REC_RPC_DEBUG_LIBRARY}\" )

	FIND_FILE(
		REC_RPC_RELEASE_DLL
		rec_rpc.dll 
		\${REC_RPC_BIN_DIR}
		NO_DEFAULT_PATH 
	)
	FIND_FILE(
		REC_RPC_DEBUG_DLL
		rec_rpcd.dll 
		\${REC_RPC_BIN_DIR}
		NO_DEFAULT_PATH 
	)
ELSE( WIN32 )
	SET( REC_RPC_LIBRARY \"\${REC_RPC_RELEASE_LIBRARY}\" )
ENDIF( WIN32 )

MACRO( COPY_REC_RPC_DLLS releaseTarget debugTarget )
	CONFIGURE_FILE( \${REC_RPC_RELEASE_DLL} \${releaseTarget} COPYONLY )
    CONFIGURE_FILE( \${REC_RPC_DEBUG_DLL} \${debugTarget} COPYONLY )
ENDMACRO( COPY_REC_RPC_DLLS )

IF( LIBREC_RPC )
	SET( REC_RPC_LIB_FOUND TRUE )
ENDIF( LIBREC_RPC )

MARK_AS_ADVANCED( REC_RPC_LIB_FOUND )
MARK_AS_ADVANCED( REC_RPC_INCLUDES )
")


MESSAGE("REC_RPC_RELEASE_DLL:${REC_RPC_RELEASE_DLL}")
IF( WIN32 )
	INSTALL(FILES ${REC_RPC_RELEASE_DLL} DESTINATION bin)
ENDIF( WIN32 )
MESSAGE("REC_RPC_RELEASE_DLL:${REC_RPC_RELEASE_DLL}\n")
