SET(
	NAME
	rec_rpc
)

SET( REC_RPC_INCLUDE_INSTALL_DIR include/rec/rpc )

IF( NOT REC_RPC_MAJOR_VER )
	SET( REC_RPC_MAJOR_VER 1 )
	SET( REC_RPC_MINOR_VER 5 )
	SET( REC_RPC_PATCH_VER 2 )
	SET( REC_RPC_VER_SUFFIX )
ENDIF( NOT REC_RPC_MAJOR_VER )
SET( REC_RPC_LIBVERSION "${REC_RPC_MAJOR_VER}.${REC_RPC_MINOR_VER}.${REC_RPC_PATCH_VER}${REC_RPC_VER_SUFFIX}" )

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_BINARY_DIR}
)

FILE( GLOB MAIN_SRCS *.cpp )
FILE( GLOB MAIN_PRIVATE_HEADER *.hpp )
FILE( GLOB MAIN_HEADER *.h )

SET( MAIN_HEADER ${MAIN_HEADER} "${CMAKE_CURRENT_BINARY_DIR}/rec/rpc/rec_rpc_version.h" )

IF( WIN32 AND NOT REC_RPC_STATIC )
	SET( MAIN_SRCS ${MAIN_SRCS} "${CMAKE_CURRENT_BINARY_DIR}/rec/rpc/rec_rpc_version.rc" )
ENDIF( WIN32 AND NOT REC_RPC_STATIC )

SET( HEADER ${MAIN_HEADER} )

IF( NOT WIN32 )
	SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -fvisibility=hidden" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden" )

	#IF( NOT CMAKE_BUILD_TYPE )
	#	SET( CMAKE_BUILD_TYPE Release CACHE STRING
	#		"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
	#		FORCE )
	#ENDIF( NOT CMAKE_BUILD_TYPE )
ENDIF( NOT WIN32 )

SOURCE_GROUP( "Source Files" FILES ${SRCS} ${MAIN_HEADER} ${MAIN_PRIVATE_HEADER} )

MY_WRAP_CPP(
	MOC_SRCS
	"rec_rpc"
	${HEADER}
	${MAIN_PRIVATE_HEADER}
)

INCLUDE( configuration/CMakeLists.txt )
INCLUDE( messages/CMakeLists.txt )
INCLUDE( server/CMakeLists.txt )
INCLUDE( client/CMakeLists.txt )
INCLUDE( serialization/CMakeLists.txt )

IF( REC_RPC_STATIC )	
	SET( LIBTYPE STATIC )
ELSE( REC_RPC_STATIC )	
	SET( LIBTYPE SHARED )
ENDIF( REC_RPC_STATIC )
	
ADD_LIBRARY(
	${NAME}
	${LIBTYPE}
	${MAIN_SRCS}
	${SRCS}
	${HEADER}
	${MAIN_PRIVATE_HEADER}
	${PRIVATE_HEADER}
	${MOC_SRCS}
)

SOURCE_GROUP( Moc REGULAR_EXPRESSION "(moc_|qrc_)" )

IF(WIN32)
	SET_TARGET_PROPERTIES(
		${NAME}
		PROPERTIES
		COMPILE_FLAGS "/wd4251 /MP"
	)
	IF( REC_RPC_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET_TARGET_PROPERTIES(
			${NAME}
			PROPERTIES
			STATIC_LIBRARY_FLAGS "/machine:x64"
		)
	ENDIF( REC_RPC_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )	
ELSE( WIN32 )
	IF( REC_RPC_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
		SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -fPIC" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC" )
	ENDIF( REC_RPC_STATIC AND CMAKE_SIZEOF_VOID_P EQUAL 8 )
ENDIF( WIN32 )

TARGET_LINK_LIBRARIES(
	${NAME}
	${QT_QTCORE_LIBRARY}
	${QT_QTNETWORK_LIBRARY}
	${QT_QTXML_LIBRARY}
)

GENERATE_VERSION( ${NAME} ${CMAKE_CURRENT_BINARY_DIR}/rec/rpc/rec_rpc_version.h "${REC_RPC_LIBVERSION}" "${NAME}" "" )
IF( NOT REC_RPC_STATIC )
	GENERATE_VERSION_RC( ${NAME} ${CMAKE_CURRENT_BINARY_DIR}/rec/rpc/rec_rpc_version.rc "${REC_RPC_LIBVERSION}" "REC RPC library" "${NAME}" "${NAME}.dll" 1 )
ENDIF( NOT REC_RPC_STATIC )

IF (APPLE)
	set_target_properties (${NAME} PROPERTIES XCODE_ATTRIBUTE_SYMROOT "${ROBOTINO_API2_BINARY_DIR}")
	set_target_properties (${NAME} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "\$(BUILD_DIR)/\$(CONFIGURATION)\$(EFFECTIVE_PLATFORM_NAME)")
ENDIF (APPLE)

IF( DO_REC_RPC_INSTALL )
	INSTALL(
		TARGETS ${NAME}
		ARCHIVE DESTINATION lib
		LIBRARY DESTINATION lib
		RUNTIME DESTINATION bin
	)

	INSTALL(
		FILES
		${MAIN_HEADER}
		DESTINATION ${REC_RPC_INCLUDE_INSTALL_DIR}
	)
ENDIF( DO_REC_RPC_INSTALL )
