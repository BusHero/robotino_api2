cmake_minimum_required(VERSION 2.6)

IF( WIN32 )

PROJECT( GRAPPLER_FIRMWARE_UPDATER )
#SET( OPENROBOTINO_VERSION 1.8.35 CACHE STRING "RobotinoView Version" FORCE )
#STRING( REGEX MATCHALL [0-9]+ VERSION_SPLIT ${OPENROBOTINO_VERSION} )
#LIST( GET VERSION_SPLIT 0 OPENROBOTINO_MAJOR )
#LIST( GET VERSION_SPLIT 1 OPENROBOTINO_MINOR )
#LIST( GET VERSION_SPLIT 2 OPENROBOTINO_PATCH )

IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	PROJECT( ROBOTINO_COMMON_x64 )
	SET( ARCHITECTURE amd64 )
ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	SET( ARCHITECTURE i386 )
ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )

SET(
	CMAKE_MODULE_PATH
	${CMAKE_CURRENT_SOURCE_DIR}/cmake
	${CMAKE_CURRENT_SOURCE_DIR}/cmake/qt
	${CMAKE_CURRENT_SOURCE_DIR}/cmake/utils
)

SET(
	CMAKE_DEBUG_POSTFIX
	"d"
)

STRING( REPLACE "\\" "/" ProgramFiles "$ENV{ProgramFiles}" )

SET(
	INSTALL_DIR
	"${CMAKE_CURRENT_BINARY_DIR}/install"
)
SET(
	CMAKE_INSTALL_PREFIX
	"${CMAKE_CURRENT_BINARY_DIR}/install"
)
SET( BIN_INSTALL_DIR "bin" )

ADD_DEFINITIONS( 
	-D_CRT_SECURE_NO_DEPRECATE
	-DWIN32_LEAN_AND_MEAN
)

SET( CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}   /GL /D _SECURE_SCL=0" )
SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL /D _SECURE_SCL=0" )
SET( CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}    /LTCG" )
SET( CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG" )
SET( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG" )

SET(
  GLOBAL_TARGET_DIR
  ${CMAKE_CURRENT_BINARY_DIR}/target
)

FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR} )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/debug )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/release )
    
SET(
  EXECUTABLE_OUTPUT_PATH
  ${GLOBAL_TARGET_DIR}
)
  
SET(
  LIBRARY_OUTPUT_PATH
  ${GLOBAL_TARGET_DIR}
)

#SET( QT_USE_QTNETWORK 1 )
#SET( QT_USE_QTXML 1 )
SET( QT_USE_QTGUI 1 )

find_package( Qt4 REQUIRED )

find_package( MyQt4helpers REQUIRED )
COPY_QT4_DLLS( ${GLOBAL_TARGET_DIR}/release ${GLOBAL_TARGET_DIR}/debug )

SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG QT_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE QT_NO_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE QT_NO_DEBUG_OUTPUT )
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE QT_NO_WARNING_OUTPUT )
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELWITHDEBINFO QT_NO_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_MINSIZEREL QT_NO_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_MINSIZEREL QT_NO_DEBUG_OUTPUT )
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_MINSIZEREL QT_NO_WARNING_OUTPUT )

INCLUDE_DIRECTORIES( ${QT_INCLUDE_DIR} ${QT_QTCORE_INCLUDE_DIR} ${QT_QTXML_INCLUDE_DIR} ${QT_QTNETWORK_INCLUDE_DIR} ${QT_QTGUI_INCLUDE_DIR} )
ADD_DEFINITIONS(${QT_DEFINITIONS})

ADD_DEFINITIONS( -DHAVE_QT )

INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_SOURCE_DIR}/lib
)

ADD_DEFINITIONS( -DUNICODE -D_UNICODE )

ADD_SUBDIRECTORY( lib ${CMAKE_CURRENT_BINARY_DIR}/lib )

INCLUDE( src/CMakeLists.txt )

INSTALL(
	FILES
	"${CMAKE_CURRENT_SOURCE_DIR}/../firmware/src/version.h"
	DESTINATION trash
)

INSTALL(
FILES
	${QT4_RELEASE_DLLS}
	DESTINATION bin
)

IF( WIN32 )
	INSTALL(
	  DIRECTORY
	  driver/x86
	  DESTINATION driver
	)
	INSTALL(
	  DIRECTORY
	  driver/x64
	  DESTINATION driver
	)
	INSTALL(
	  FILES
	  driver/DPInst.xml
	  DESTINATION driver/x86
	)
	INSTALL(
	  FILES
	  driver/DPInst.xml
	  DESTINATION driver/x64
	)

	FILE( GLOB INF ${CMAKE_CURRENT_SOURCE_DIR}/../driver/*.inf )

	INSTALL(
		FILES
		${INF}
		DESTINATION driver/x86
	)

	INSTALL(
		FILES
		${INF}
		DESTINATION driver/x64
	)
ENDIF(WIN32)

find_package( Innosetup )
IF( INNOSETUP_FOUND )

	find_package(VCRedist REQUIRED)
	
	INSTALL(
		FILES
		${VCREDIST}
		DESTINATION trash
	)

	STRING( REPLACE "/" "\\" INSTALL_DIR "${CMAKE_INSTALL_PREFIX}" )
	STRING( REPLACE "/" "\\" SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" )
	
	SET( INSTALLER_OUTPUT_DIR_SL "${CMAKE_CURRENT_BINARY_DIR}/Output" )
	
	STRING( REPLACE "/" "\\" INSTALLER_OUTPUT_DIR "${INSTALLER_OUTPUT_DIR_SL}" )
	
	CONFIGURE_FILE( updater.iss.in ${CMAKE_CURRENT_BINARY_DIR}/updater.iss @ONLY )
	#CONFIGURE_FILE( setup/wizardimage.bmp ${CMAKE_CURRENT_BINARY_DIR}/setup/wizardimage.bmp COPYONLY )
	#CONFIGURE_FILE( setup/smallwizardimage.bmp ${CMAKE_CURRENT_BINARY_DIR}/setup/smallwizardimage.bmp COPYONLY )

	FILE( WRITE ${CMAKE_CURRENT_BINARY_DIR}/CreateInstaller.cmake 
		"EXECUTE_PROCESS(
			COMMAND \"${INNOSETUP_COMPILER}\" \"/cc\" \"${CMAKE_CURRENT_BINARY_DIR}/updater.iss\"
		)
	")

	ADD_CUSTOM_TARGET(
		ALL_CREATE_INSTALLER
		COMMAND del /F /Q "${INSTALLER_OUTPUT_DIR}"
		COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/CreateInstaller.cmake
		COMMENT "create installer"
	)
ENDIF( INNOSETUP_FOUND )

ELSE( WIN32 )
	MESSAGE( "This project is Windows only!" )
ENDIF( WIN32 )