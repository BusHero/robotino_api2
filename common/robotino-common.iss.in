#define INSTALLDIR "@INSTALL_DIR@"
#define COMPILER_VERSION "@ARCHITECTURE@"
#define VCREDISTFILE "@VCREDISTFILENAME@"
#define SYSTEMBITNES "@BITNES@"
#define MajorVer "@ROBOTINO_COMMON_MAJOR@"
#define MinorVer "@ROBOTINO_COMMON_MINOR@"
#define PatchVer "@ROBOTINO_COMMON_PATCH@"

#define MyCompany "REC GmbH"
#define MyAppName "robotino_common"

[Setup]
AppId={#MyAppName}-{#MajorVer}
AppName={#MyAppName}
AppVerName={#MyAppName} {#MajorVer}.{#MinorVer}.{#PatchVer}
AppPublisher=Robotics Equipment Corporation GmbH, Planegg, Germany
AppPublisherURL=http://wiki.openrobotino.org
AppSupportURL=http://wiki.openrobotino.org
AppUpdatesURL=http://wiki.openrobotino.org
DefaultDirName={pf}\REC GmbH\robotino\common
UsePreviousAppDir=yes
DefaultGroupName={#MyAppName}
;UninstallDisplayIcon={app}\bin\{#MyAppExeName}
UninstallDisplayName={#MyAppName} {#MajorVer}.{#MinorVer}.{#PatchVer} (Uninstall)
AlwaysShowDirOnReadyPage=true
AlwaysShowGroupOnReadyPage=true
OutputBaseFilename={#MyAppName}-{#COMPILER_VERSION}-{#MajorVer}.{#MinorVer}.{#PatchVer}
Compression=lzma
SolidCompression=yes
RestartIfNeededByRun=false
ShowTasksTreeLines=true
AllowNoIcons=true
ChangesAssociations=yes
ChangesEnvironment=yes
@COMMENT3264@ArchitecturesAllowed=x64
@COMMENT3264@ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: en; MessagesFile: compiler:Default.isl;
Name: de; MessagesFile: compiler:Languages\German.isl;

[CustomMessages]
en.InstallingUSBDriver=Installing USB driver for Robotino3.
de.InstallingUSBDriver=Installiere USB-Treiber für Robotino3.
en.WillInstallUSBDrivers=Setup will now try to install the USB driver for Robotino3. During this process, messages might appear that%nnotify you that the drivers you are about to install are not digitally signed and that it is not recommended to install them.%n%nHowever, if you want to communicate with your Robotino3's IO-board via USB, you will have to install those drivers.%nFor this purpose, click on the "Continue installation" button as soon as the dialog is shown.%n%nIf you decide not to install the drivers at this point, you can perform the installation later.
de.WillInstallUSBDrivers=Setup wird nun versuchen, den USB-Treiber für Robotino3 zu installieren. Dabei werden Ihnen möglicherweise%nMitteilungen angezeigt, die Sie darauf aufmerksam machen, dass die zu installierenden Treiber nicht digital signiert%nsind und von einer Installation abgeraten wird.%n%nWenn Sie mit der EA-Platine von Robotino3 über USB kommunizieren wollen ist es jedoch erforderlich, diese%nTreiber zu installieren. Klicken Sie dazu auf "Installation fortsetzen", sobald der Dialog angezeigt wird.%n%nSollten Sie sich dazu entschließen, die Treiber nicht zu installieren, so können Sie dies zu einem späteren%nZeitpunkt nachholen.

[Tasks]
Name: modifypath; Description: &Add application directory to your system path; Flags:

[Files]
Source: {#INSTALLDIR}\*.*; DestDir: {app}; Flags: ignoreversion recursesubdirs; Excludes: trash
Source: {#INSTALLDIR}\trash\{#VCREDISTFILE}; DestDir: {tmp}

[Icons]
Name: {group}\IOTest; Filename: {app}\bin\iotest.exe; WorkingDir: {app}\bin
Name: {group}\IOCom; Filename: {app}\bin\iocom.exe; WorkingDir: {app}\bin

[Run]
Filename: {tmp}\{#VCREDISTFILE}; Parameters: "/q"; StatusMsg: Installing Redistributable Package for {#COMPILER_VERSION}.
Filename: {app}\drivers\robotino3-usb\x86\DPInst_x86.exe; Parameters: /lm /sw; WorkingDir: {app}\drivers\robotino3-usb\x86; StatusMsg: {cm:InstallingUSBDriver}; Check: Install32BitUSBDriver
Filename: {app}\drivers\robotino3-usb\x64\DPInst_x64.exe; Parameters: /lm /sw; WorkingDir: {app}\drivers\robotino3-usb\x64; StatusMsg: {cm:InstallingUSBDriver}; Check: Install64BitUSBDriver

[Registry]
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: ROBOTINOCOMMON{#SYSTEMBITNES}_DIR; ValueData: {app}

[Code]
function ModPathDir(): TArrayOfString;
var
	Dir:	TArrayOfString;
begin
	setArrayLength(Dir, 1)
	Dir[0] := ExpandConstant('{app}') + '\bin';
	Result := Dir;
end;

// ----------------------------------------------------------------------------
//
// Inno Setup Ver:  5.2.1
// Script Version:  1.3.1
// Author:          Jared Breland <jbreland@legroom.net>
// Homepage:		http://www.legroom.net/software
//
// Script Function:
//	Enable modification of system path directly from Inno Setup installers
//
// Instructions:
//	Copy modpath.iss to the same directory as your setup script
//
//	Add this statement to your [Setup] section
//		ChangesEnvironment=yes
//
//	Add this statement to your [Tasks] section
//	You can change the Description or Flags, but the Name must be modifypath
//		Name: modifypath; Description: &Add application directory to your system path; Flags: unchecked
//
//	Add the following to the end of your [Code] section
//	setArrayLength must specify the total number of dirs to be added
//	Dir[0] contains first directory, Dir[1] contains second, etc.
//		function ModPathDir(): TArrayOfString;
//		var
//			Dir:	TArrayOfString;
//		begin
//			setArrayLength(Dir, 1)
//			Dir[0] := ExpandConstant('{app}');
//			Result := Dir;
//		end;
//		#include "modpath.iss"
// ----------------------------------------------------------------------------

procedure ModPath();
var
	oldpath:	String;
	newpath:	String;
	pathArr:	TArrayOfString;
	aExecFile:	String;
	aExecArr:	TArrayOfString;
	i, d:		Integer;
	pathdir:	TArrayOfString;
begin

	// Get array of new directories and act on each individually
	pathdir := ModPathDir();
	for d := 0 to GetArrayLength(pathdir)-1 do begin

		// Modify WinNT path
		if UsingWinNT() = true then begin

			// Get current path, split into an array
			RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', oldpath);
			oldpath := oldpath + ';';
			i := 0;
			while (Pos(';', oldpath) > 0) do begin
				SetArrayLength(pathArr, i+1);
				pathArr[i] := Copy(oldpath, 0, Pos(';', oldpath)-1);
				oldpath := Copy(oldpath, Pos(';', oldpath)+1, Length(oldpath));
				i := i + 1;

				// Check if current directory matches app dir
				if pathdir[d] = pathArr[i-1] then begin
					// if uninstalling, remove dir from path
					if IsUninstaller() = true then begin
						continue;
					// if installing, abort because dir was already in path
					end else begin
						abort;
					end;
				end;

				// Add current directory to new path
				if i = 1 then begin
					newpath := pathArr[i-1];
				end else begin
					newpath := newpath + ';' + pathArr[i-1];
				end;
			end;

			// Append app dir to path if not already included
			if IsUninstaller() = false then
				newpath := newpath + ';' + pathdir[d];

			// Write new path
			RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', newpath);

		// Modify Win9x path
		end else begin

			// Convert to shortened dirname
			pathdir[d] := GetShortName(pathdir[d]);

			// If autoexec.bat exists, check if app dir already exists in path
			aExecFile := 'C:\AUTOEXEC.BAT';
			if FileExists(aExecFile) then begin
				LoadStringsFromFile(aExecFile, aExecArr);
				for i := 0 to GetArrayLength(aExecArr)-1 do begin
					if IsUninstaller() = false then begin
						// If app dir already exists while installing, abort add
						if (Pos(pathdir[d], aExecArr[i]) > 0) then
							abort;
					end else begin
						// If app dir exists and = what we originally set, then delete at uninstall
						if aExecArr[i] = 'SET PATH=%PATH%;' + pathdir[d] then
							aExecArr[i] := '';
					end;
				end;
			end;

			// If app dir not found, or autoexec.bat didn't exist, then (create and) append to current path
			if IsUninstaller() = false then begin
				SaveStringToFile(aExecFile, #13#10 + 'SET PATH=%PATH%;' + pathdir[d], True);

			// If uninstalling, write the full autoexec out
			end else begin
				SaveStringsToFile(aExecFile, aExecArr, False);
			end;
		end;

		// Write file to flag modifypath was selected
		//   Workaround since IsTaskSelected() cannot be called at uninstall and AppName and AppId cannot be "read" in Code section
		if IsUninstaller() = false then
			SaveStringToFile(ExpandConstant('{app}') + '\uninsTasks.txt', WizardSelectedTasks(False), False);
	end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
	ResultCode: Integer;
	Uninstall: String;
begin
	if CurStep = ssPostInstall then
		if IsTaskSelected('modifypath') then
			ModPath();
			
	if (CurStep = ssInstall) then begin
		if RegQueryStringValue(HKLM, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{#MyAppName}-{#MajorVer}_is1', 'UninstallString', Uninstall) then begin
			Exec(RemoveQuotes(Uninstall), ' /SILENT', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
		end;
	end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
	appdir:			String;
	selectedTasks:	String;
begin
	appdir := ExpandConstant('{app}')
	if CurUninstallStep = usUninstall then begin
		DeleteFile(appdir + '\uninsTasks.txt')
	end;
end;

function NeedRestart(): Boolean;
begin
	if IsTaskSelected('modifypath') and not UsingWinNT() then begin
		Result := True;
	end else begin
		Result := False;
	end;
end;

function Install32BitUSBDriver: Boolean;
begin
	//Result := DoInstallUSBCortexM3Driver;
	//if (Result) then begin
		Result := (not IsWin64);

		if (Result) then begin
			SuppressibleMsgBox(Format(CustomMessage('WillInstallUSBDrivers'), [ExpandConstant('{app}')]), mbInformation, MB_OK, MB_OK);
		end;
	//end;
end;

function Install64BitUSBDriver: Boolean;
begin
	//Result := DoInstallUSBCortexM3Driver;
	//if (Result) then begin
		Result := IsWin64;

		if (Result) then begin
			SuppressibleMsgBox(Format(CustomMessage('WillInstallUSBDrivers'), [ExpandConstant('{app}')]), mbInformation, MB_OK, MB_OK);
		end;
	//end;
end;