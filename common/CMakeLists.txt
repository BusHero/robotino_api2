cmake_minimum_required(VERSION 3.0)

PROJECT( ROBOTINO_COMMON )

SET( ROBOTINO_COMMON_VERSION 1.1.14 CACHE STRING "Robotino Common Version" FORCE )
STRING( REGEX MATCHALL [0-9]+ VERSION_SPLIT ${ROBOTINO_COMMON_VERSION} )
LIST( GET VERSION_SPLIT 0 ROBOTINO_COMMON_MAJOR )
LIST( GET VERSION_SPLIT 1 ROBOTINO_COMMON_MINOR )
LIST( GET VERSION_SPLIT 2 ROBOTINO_COMMON_PATCH )

IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	PROJECT( ROBOTINO_COMMON_x64 )
	SET( ARCHITECTURE amd64 )
ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	SET( ARCHITECTURE i386 )
ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )

SET( ROBOTINO_COMMON_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" )
SET( ROBOTINO_COMMON_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}" )

IF( NOT RECRPC_DIR )
	IF( WIN32 )
		IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE "\\" "/" RECRPC_DIR "$ENV{RECRPC64_DIR}" )
		ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE "\\" "/" RECRPC_DIR "$ENV{RECRPC32_DIR}" )
		ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	ELSE( WIN32 )
			SET( RECRPC_DIR "/usr/local/rec_rpc" )
	ENDIF( WIN32 )
ENDIF( NOT RECRPC_DIR )

SET( EXTERNAL_DIR "${ROBOTINO_COMMON_SOURCE_DIR}/external" )

SET(
	CMAKE_MODULE_PATH
	${CMAKE_CURRENT_SOURCE_DIR}/cmake
	${CMAKE_CURRENT_SOURCE_DIR}/cmake/external
	${RECRPC_DIR}
	${EXTERNAL_DIR}/cmake
)

IF( WIN32 )
ELSE( WIN32 )
	IF( NOT CMAKE_BUILD_TYPE )
		SET( CMAKE_BUILD_TYPE Release CACHE STRING
			"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
			FORCE )
		SET( CMAKE_CXX_FLAGS_RELEASE "-O2" CACHE STRING
			"cxx release flags."
			FORCE )
		SET( CMAKE_C_FLAGS_RELEASE "-O2" CACHE STRING
			"c release flags."
			FORCE )
	ENDIF( NOT CMAKE_BUILD_TYPE )

	MESSAGE( "MMX enabled on Linux" )
	SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -mmmx -fPIC" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmmx -fPIC" )

	EXEC_PROGRAM( "cat /etc/issue" OUTPUT_VARIABLE BUILDDIST )
	STRING( SUBSTRING ${BUILDDIST} 0 11 BUILDDIST )
	IF ( ARCHITECTURE STREQUAL "i386" AND BUILDDIST STREQUAL "Ubuntu 9.04" )
		MESSAGE( "Detected Robotino Development System (Ubuntu 9.04 x86)!" )
		MESSAGE( "Providing Robotino specific optimization!" )
		OPTION( ROBOTINO_OPTIMIZATION "Robotino specific optimization?" ON)
	ENDIF ( ARCHITECTURE STREQUAL "i386" AND BUILDDIST STREQUAL "Ubuntu 9.04" )
	IF( ROBOTINO_OPTIMIZATION )
		MESSAGE( "Using Robotino specific optimization: optimizing for i486 and tuning for AMD Geode." )
		SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -march=i486 -mtune=geode -pipe -fno-align-functions -fno-align-loops -fno-align-jumps -fno-align-labels -finline-functions" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=i486 -mtune=geode -pipe -fno-align-functions -fno-align-loops -fno-align-jumps -fno-align-labels -finline-functions" )
	ELSE( ROBOTINO_OPTIMIZATION )
		IF( ARCHITECTURE STREQUAL "i386" )
			SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -march=i686" )
			SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=i686" )
		ENDIF( ARCHITECTURE STREQUAL "i386" )
		MESSAGE( "SSE and SSE2 enabled on Linux" )
		SET( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -msse -msse2 -mfpmath=sse" )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse -msse2 -mfpmath=sse" )
	ENDIF( ROBOTINO_OPTIMIZATION )
ENDIF( WIN32 )

INCLUDE( GenerateVersion )
INCLUDE( GenerateManifest )

SET(
  GLOBAL_TARGET_DIR
  ${ROBOTINO_COMMON_BINARY_DIR}/target
)
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR} )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/debug )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/release )

INCLUDE( MyQt )

SET( DO_COMMON_INSTALL 1 )

IF( WIN32 )
  SET(
    CMAKE_DEBUG_POSTFIX
    "d"
  )
ENDIF( WIN32 )

IF( WIN32 )
	STRING( REPLACE "\\" "/" ProgramFiles "$ENV{ProgramFiles}" )

	SET(
		CMAKE_INSTALL_PREFIX
		"${CMAKE_CURRENT_BINARY_DIR}/install/"
	)
	ADD_DEFINITIONS( 
		-D_CRT_SECURE_NO_DEPRECATE
		-DWIN32_LEAN_AND_MEAN
	)
	SET( CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}   /GL /D _SECURE_SCL=0" )
	SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL /D _SECURE_SCL=0" )
	SET( CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}    /LTCG" )
	SET( CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG" )
	SET( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG" )
ELSE( WIN32 )
	SET(
		INSTALL_DIR
		"${CMAKE_CURRENT_BINARY_DIR}/install"
	)
	SET(
		CMAKE_INSTALL_PREFIX
		"install/usr/local/robotino/common"
	)

	FILE( MAKE_DIRECTORY ${INSTALL_DIR} )
	FILE( MAKE_DIRECTORY ${INSTALL_DIR}/DEBIAN )
	
	CONFIGURE_FILE( linux_install/robotino_common.conf ${CMAKE_CURRENT_BINARY_DIR}/robotino_common.conf COPYONLY )
	CONFIGURE_FILE( linux_install/create_packages.sh.in ${CMAKE_CURRENT_BINARY_DIR}/create_packages.sh @ONLY )
	EXECUTE_PROCESS( COMMAND chmod +x ${CMAKE_CURRENT_BINARY_DIR}/create_packages.sh TIMEOUT 100 )
	
	CONFIGURE_FILE( linux_install/postinst ${CMAKE_CURRENT_BINARY_DIR}/install/DEBIAN/postinst COPYONLY )
	CONFIGURE_FILE( linux_install/preinst ${CMAKE_CURRENT_BINARY_DIR}/install/DEBIAN/preinst COPYONLY )
	CONFIGURE_FILE( linux_install/postrm ${CMAKE_CURRENT_BINARY_DIR}/install/DEBIAN/postrm COPYONLY )
	CONFIGURE_FILE( linux_install/prerm ${CMAKE_CURRENT_BINARY_DIR}/install/DEBIAN/prerm COPYONLY )
	
	IF( QT5_FOUND )
		SET( DEPENDS "rec-rpc (>= 1.6.0)" )
	ELSE()
		SET( DEPENDS "rec-rpc (>= 1.6.0), libqtgui4" )
	ENDIF()

	CONFIGURE_FILE( linux_install/control.in ${CMAKE_CURRENT_BINARY_DIR}/install/DEBIAN/control @ONLY )
ENDIF( WIN32 )
  
SET( BIN_INSTALL_DIR bin )
SET( LIB_INSTALL_DIR lib )
	
IF( WIN32 )
	find_package( ATL )
ENDIF( WIN32 )

SET(
  LIBRARY_OUTPUT_PATH
  ${GLOBAL_TARGET_DIR}
)
    
SET(
  EXECUTABLE_OUTPUT_PATH
  ${GLOBAL_TARGET_DIR}
)

INCLUDE_DIRECTORIES(
  ${CMAKE_CURRENT_SOURCE_DIR}/lib
)

find_package( RTAI )

IF( RTAI_FOUND )
	INCLUDE_DIRECTORIES( ${RTAI_INCLUDE_DIR} )
	ADD_DEFINITIONS( -DUSE_RTAI )
ENDIF( RTAI_FOUND )

find_package(PCAN REQUIRED)
INCLUDE_DIRECTORIES(
	${PCAN_INCLUDE_DIR}
)
COPY_PCAN_DLLS( ${GLOBAL_TARGET_DIR}/release/ ${GLOBAL_TARGET_DIR}/debug/ )

ADD_DEFINITIONS( -DUNICODE -D_UNICODE )

find_package( RecRpc REQUIRED )
INCLUDE_DIRECTORIES(
	${REC_RPC_INCLUDES}
)
IF( WIN32 )
	COPY_REC_RPC_DLLS( ${GLOBAL_TARGET_DIR}/release/ ${GLOBAL_TARGET_DIR}/debug/ )
ENDIF( WIN32 )

ADD_SUBDIRECTORY( lib )
ADD_SUBDIRECTORY( apps )

INSTALL(
  FILES
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindRobotinoCommon.cmake
  DESTINATION cmake
)

INSTALL(
  FILES
  CHANGELOG.txt
  DESTINATION .
)

IF( WIN32 )
INSTALL(
	FILES
		${PCAN_DLL}
		${REC_RPC_RELEASE_DLL}
		DESTINATION bin
	)
	SET( FIRMWARE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../firmware/Robotino3/trunk" )
	IF( EXISTS "${FIRMWARE_DIR}/" )
		INSTALL(
		  FILES
		  "${FIRMWARE_DIR}/combined.hex"
		  "${FIRMWARE_DIR}/combined_version.txt"
		  "${FIRMWARE_DIR}/Robotino3_flash_firmware.uvproj"
		  "${FIRMWARE_DIR}/Robotino3_flash_firmware.uvopt"
		  DESTINATION firmware
		)
	ELSE()
		MESSAGE( WARNING "Firmware not installed: ${FIRMWARE_DIR} not found" )
	ENDIF()
ELSE( WIN32 )
	INSTALL(
		FILES
		${CMAKE_CURRENT_BINARY_DIR}/robotino_common.conf
		DESTINATION "${INSTALL_DIR}/etc/ld.so.conf.d"
	)
ENDIF( WIN32 )

SET( CHANGELOG_NAME CHANGELOG_robotino_common.txt )
SET( CHANGELOG_FILE "${CMAKE_CURRENT_BINARY_DIR}/${CHANGELOG_NAME}" )
CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.txt" "${CHANGELOG_FILE}" COPYONLY )

SET( PACKAGE_NAME robotino-common )
SET( PACKAGE_VERSION ${ROBOTINO_COMMON_VERSION} )
INCLUDE( CreateInstaller )
