cmake_minimum_required(VERSION 3.0)

PROJECT( ROBOTINO_COMMON )

SET( ROBOTINO_COMMON_VERSION 1.1.14 CACHE STRING "Robotino Common Version" FORCE )
STRING( REGEX MATCHALL [0-9]+ VERSION_SPLIT ${ROBOTINO_COMMON_VERSION} )
LIST( GET VERSION_SPLIT 0 ROBOTINO_COMMON_MAJOR )
LIST( GET VERSION_SPLIT 1 ROBOTINO_COMMON_MINOR )
LIST( GET VERSION_SPLIT 2 ROBOTINO_COMMON_PATCH )

IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	PROJECT( ROBOTINO_COMMON_x64 )
	SET( ARCHITECTURE amd64 )
ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	SET( ARCHITECTURE i386 )
ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )

SET( ROBOTINO_COMMON_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}" )
SET( ROBOTINO_COMMON_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}" )
SET( RECRPC_DIR "C:\\Users\\petru\\Desktop\\install\\rec_rpc")

IF( NOT RECRPC_DIR )
	IF( WIN32 )
		STRING( REPLACE "robotino_common" "rec_rpc" RECRPC_DIR "${CMAKE_CURRENT_BINARY_DIR}/install" )
	ELSE( WIN32 )
		SET( RECRPC_DIR "/usr/local/rec_rpc" )
	ENDIF( WIN32 )
ENDIF( NOT RECRPC_DIR )

SET( EXTERNAL_DIR "${ROBOTINO_COMMON_SOURCE_DIR}/external" )

SET( CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_CURRENT_SOURCE_DIR}/cmake/external ${RECRPC_DIR} ${EXTERNAL_DIR}/cmake)

INCLUDE( GenerateVersion )
INCLUDE( GenerateManifest )

SET( GLOBAL_TARGET_DIR ${ROBOTINO_COMMON_BINARY_DIR}/target)
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR} )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/debug )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/release )



INCLUDE( MyQt )
MESSAGE("After Include (MyQt)\n")



SET( DO_COMMON_INSTALL 1 )
SET( CMAKE_DEBUG_POSTFIX "d")


STRING( REPLACE "\\" "/" ProgramFiles "$ENV{ProgramFiles}" )

SET(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/install/")
ADD_DEFINITIONS( -D_CRT_SECURE_NO_DEPRECATE -DWIN32_LEAN_AND_MEAN)
SET( CMAKE_C_FLAGS_RELEASE   "${CMAKE_C_FLAGS_RELEASE}   /GL /D _SECURE_SCL=0" )
SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL /D _SECURE_SCL=0" )
SET( CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}    /LTCG" )
SET( CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG" )
SET( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG" )

  
SET( BIN_INSTALL_DIR bin )
SET( LIB_INSTALL_DIR lib )
	
find_package( ATL )

SET(LIBRARY_OUTPUT_PATH ${GLOBAL_TARGET_DIR})
    
SET(EXECUTABLE_OUTPUT_PATH ${GLOBAL_TARGET_DIR})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib)

find_package( RTAI )

IF( RTAI_FOUND )
	INCLUDE_DIRECTORIES( ${RTAI_INCLUDE_DIR} )
	ADD_DEFINITIONS( -DUSE_RTAI )
ENDIF( RTAI_FOUND )

find_package(PCAN REQUIRED)
MESSAGE("PCAN:${PCAN}")
MESSAGE("After find_package(PCAN REQUIRED)")

INCLUDE_DIRECTORIES(${PCAN_INCLUDE_DIR})
COPY_PCAN_DLLS( ${GLOBAL_TARGET_DIR}/release/ ${GLOBAL_TARGET_DIR}/debug/ )
MESSAGE("AFTER COPY_PCAN_DLLS")

ADD_DEFINITIONS( -DUNICODE -D_UNICODE )

find_package( RecRpc REQUIRED )
MESSAGE("AFTER Find_package(RecRPC)")
INCLUDE_DIRECTORIES(${REC_RPC_INCLUDES})
MESSAGE("REC_RPC_INCLUDES:${REC_RPC_INCLUDES}")
MESSAGE("GLOBAL_TARGET_DIR:${GLOBAL_TARGET_DIR}")
COPY_REC_RPC_DLLS( ${GLOBAL_TARGET_DIR}/release/ ${GLOBAL_TARGET_DIR}/debug/ )
MESSAGE("After COPY_REC_RPC_DLLS")
ADD_SUBDIRECTORY( lib )
ADD_SUBDIRECTORY( apps )

INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindRobotinoCommon.cmake DESTINATION cmake)

INSTALL(FILES CHANGELOG.txt DESTINATION .)

INSTALL(FILES ${PCAN_DLL} ${REC_RPC_RELEASE_DLL} DESTINATION bin)
SET( FIRMWARE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../firmware/Robotino3/trunk" )
IF( EXISTS "${FIRMWARE_DIR}/" )
	INSTALL(FILES "${FIRMWARE_DIR}/combined.hex" "${FIRMWARE_DIR}/combined_version.txt" "${FIRMWARE_DIR}/Robotino3_flash_firmware.uvproj" "${FIRMWARE_DIR}/Robotino3_flash_firmware.uvopt" DESTINATION firmware)
ELSE()
	MESSAGE( WARNING "Firmware not installed: ${FIRMWARE_DIR} not found" )
ENDIF()

SET( CHANGELOG_NAME CHANGELOG_robotino_common.txt )
SET( CHANGELOG_FILE "${CMAKE_CURRENT_BINARY_DIR}/${CHANGELOG_NAME}" )
CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.txt" "${CHANGELOG_FILE}" COPYONLY )

SET( PACKAGE_NAME robotino-common )
SET( PACKAGE_VERSION ${ROBOTINO_COMMON_VERSION} )
INCLUDE( CreateInstaller )
